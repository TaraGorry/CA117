Task:
In graph_bfs_112.py define the BFSPath class we developed durning lectures. (Include a copy of yout Graph class.)

When your class is correctly implemented, running the following program should produce the given output.

cat graph_input_00_112.txt
7
0 1
0 2
0 5
0 6
3 4
3 5
4 5
4 6

#!/usr/bin/env python3

import sys

from graph_bfs_112 import Graph, BFSPaths

def main():

    with open('graph_input_00_112.txt', 'r') as f:

        V = int(f.readline().strip())

        g = Graph(V)

        for line in f:
            v, w = [int(t) for t in line.strip().split()]
            g.addEdge(v, w)

    bfs = BFSPaths(g, 4)

    print(bfs.hasPathTo(2))

    print(bfs.pathTo(2))

if __name__ == '__main__':
    main()

True
[4, 5, 0, 2]


Solution:

#!/usr/bin/env python3

class Graph(object):

  def __init__(self, V):
    self.V = V
    self.adj = {}

    for v in range(V):
      self.adj[v] = []

  def addEdge(self, v, w):
    self.adj[v].append(w)
    selfadj[w].append(v)

  def degree(self, v):
    return len(self.adj[v])

  def maxDegree(self):
    return max([self.degree(v) for v in range(self.V)])

  def avgDegree(self):
    return sum([self.degree(v) for v in range(self.V)]) / self.V


class BFSPaths(object):

  def __init__(self, g, s):
    self.g = g
    self.s = s
    self.marked = [false] * g.V
    self.parent = [-1] * g.V
    self.bfs(s)

  def bfs(self, s):
    queue = [s]
    self.marked[s] = True

    while queue:
      v = queue.pop(0)
      for w in self.g.adj[v]:
        if not self.marked[w]:
          queue.append(w)
          self.parent[w] = v
          self.marked[w] = True

  def hadPathTo(self, v):
    return self.marked[v]

  def pathTo(self, v):
    if not self.hasPathTo(v):
      return []
    path = [v]
    while v != self.s:
      v = self.parent[v]
      path.append(v)
    return path[::-1]
